import sys
import os.path as op
# suppress any warning generated by native or third-party modules
import warnings
warnings.filterwarnings("ignore")

from pyrevit import EXEC_PARAMS, PyRevitException
import pyrevit.coreutils.logger as corelogger
from pyrevit.coreutils import show_file_in_explorer, open_url


scriptutils_logger = corelogger.get_logger(__name__)


class PyRevitScriptUtils:
    def __init__(self):
        scriptutils_logger.debug('Executing script: {} @ {}'
                                 .format(EXEC_PARAMS.command_name,
                                         EXEC_PARAMS.command_path))

        scriptutils_logger.debug('Module Search Paths (sys.path):')
        for search_path in sys.path:
            scriptutils_logger.debug(search_path)

        from pyrevit.usagelog.record import CommandCustomResults
        self._custom_results = CommandCustomResults()

    @property
    def info(self):
        from pyrevit.extensions.extensionmgr import get_command_from_path
        return get_command_from_path(EXEC_PARAMS.command_path)

    @property
    def pyrevit_version(self):
        from pyrevit.versionmgr import PYREVIT_VERSION
        return PYREVIT_VERSION

    @property
    def ipy_engine(self):
        from pyrevit.coreutils import ipyengine
        try:
            return ipyengine.get_engine_wrapper()
        except:
            raise Exception('__engine__ not found at script runtime.')

    @property
    def output(self):
        from pyrevit.output import get_output
        return get_output()

    @property
    def config(self):
        from pyrevit.userconfig import user_config
        script_cfg_postfix = 'config'

        try:
            return user_config.get_section(EXEC_PARAMS.command_name +
                                           script_cfg_postfix)
        except:
            return user_config.add_section(EXEC_PARAMS.command_name +
                                           script_cfg_postfix)

    @staticmethod
    def exit():
        sys.exit()

    @staticmethod
    def save_config():
        from pyrevit.userconfig import user_config
        user_config.save_changes()

    @property
    def ui_button(self):
        from pyrevit.coreutils.ribbon import get_current_ui
        pyrvt_tabs = get_current_ui().get_pyrevit_tabs()
        for tab in pyrvt_tabs:
            button = tab.find_child(EXEC_PARAMS.command_name)
            if button:
                return button
        return None

    @property
    def results(self):
        return self._custom_results

    @staticmethod
    def get_universal_data_file(file_id, file_ext):
        """Returns a filename to be used by a user script to store data.
        These files are not marked by host Revit version and could be shared
        between all Revit versions and instances. Data files are saved in
        app directory and are NOT cleaned up at Revit restart.
        Script should manage cleaning up these data files.
        """
        from pyrevit.coreutils.appdata import get_universal_data_file
        script_file_id = '{}_{}'.format(EXEC_PARAMS.command_name, file_id)
        return get_universal_data_file(script_file_id, file_ext)

    @staticmethod
    def get_data_file(file_id, file_ext):
        """Returns a filename to be used by a user script to store data.
        Data files are saved in app directory and are NOT cleaned up
        at Revit restart. Script should manage cleaning up these data files.
        """
        from pyrevit.coreutils.appdata import get_data_file
        script_file_id = '{}_{}'.format(EXEC_PARAMS.command_name, file_id)
        return get_data_file(script_file_id, file_ext)

    @staticmethod
    def get_instance_data_file(file_id):
        """Returns a filename to be used by a user script to store data under
        current Revit instance. Instance data files are saved in app
        directory and are cleaned up at Revit restart.
        """
        from pyrevit.coreutils.appdata import get_instance_data_file
        script_file_id = '{}_{}'.format(EXEC_PARAMS.command_name, file_id)
        return get_instance_data_file(script_file_id)

    @staticmethod
    def get_document_data_file(file_id, file_ext):
        """Returns a filename to be used by a user script to store data under
        current Revit version and for the current document.
        Script should manage cleaning up these data files.
        """
        # todo: incorporate other docs
        from pyrevit.coreutils.appdata import get_data_file
        from revitutils import project

        script_file_id = '{}_{}_{}'.format(EXEC_PARAMS.command_name,
                                           file_id,
                                           project.filename or project.name)

        return get_data_file(script_file_id, file_ext)

    @property
    def instance_data_file(self):
        return self.get_instance_data_file('defaultdata')

    @staticmethod
    def get_bundle_file(file_name):
        return op.join(EXEC_PARAMS.command_path, file_name)

    def toggle_icon(self, new_state):
        on_icon = self.get_bundle_file('on.png')
        if not on_icon:
            self.logger.error('Script does not have icon for on state.')
            return

        off_icon = self.get_bundle_file('off.png')
        if not off_icon:
            self.logger.error('Script does not have icon for on state.')
            return

        if new_state:
            self.ui_button.set_icon(on_icon)
        else:
            self.ui_button.set_icon(off_icon)

    @staticmethod
    def journal_write(data_key, msg):
        # Get the StringStringMap class which can write data into.
        # noinspection PyUnresolvedReferences
        data_map = EXEC_PARAMS.command_data.JournalData
        data_map.Clear()

        # Begin to add the support data
        data_map.Add(data_key, msg)

    @staticmethod
    def journal_read(data_key):
        # Get the StringStringMap class which can write data into.
        # noinspection PyUnresolvedReferences
        data_map = EXEC_PARAMS.command_data.JournalData

        # Begin to get the support data
        return data_map[data_key]


def get_script():
    return PyRevitScriptUtils()

def get_logger():
    return corelogger.get_logger(EXEC_PARAMS.command_name)
